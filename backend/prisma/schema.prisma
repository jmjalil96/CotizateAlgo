generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id         String     @id @map("id")
  firstName  String     @map("first_name")
  lastName   String     @map("last_name")
  cedulaRuc  String     @unique @map("cedula_ruc")
  phone      String?
  avatarUrl  String?    @map("avatar_url")
  isActive   Boolean    @default(true) @map("is_active")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")
  assignedBy UserRole[] @relation("AssignedBy")
  userRoles  UserRole[]

  brokerId         String?      @map("broker_id")
  broker           Broker?      @relation(fields: [brokerId], references: [id])
  sentInvitations  Invitation[] 

  @@map("profiles")
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  level           Int
  createdAt       DateTime         @default(now()) @map("created_at")
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(uuid())
  resource        String
  action          String
  description     String?
  createdAt       DateTime         @default(now()) @map("created_at")
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  userId     String   @map("user_id")
  roleId     String   @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String?  @map("assigned_by")
  assigner   Profile? @relation("AssignedBy", fields: [assignedBy], references: [id])
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model Broker {
  id          String       @id @default(uuid()) @map("id")
  name        String       @unique
  description String?
  parentId    String?      @map("parent_id")
  parent      Broker?      @relation("BrokerHierarchy", fields: [parentId], references: [id])
  children    Broker[]     @relation("BrokerHierarchy")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  profiles    Profile[]    
  clients     Client[]     

  @@map("brokers")
}

model Invitation {
  id                      String    @id @default(uuid()) @map("id")
  token                   String    @unique
  email                   String    
  invitedBy               String    @map("invited_by")
  status                  String    @default("pending")
  expiresAt               DateTime  
  childBrokerName         String    @map("child_broker_name")
  childBrokerDescription  String?   @map("child_broker_description")
  createdAt               DateTime  @default(now()) @map("created_at")

  invitedByUser Profile  @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@map("invitations")
}

model Client {
  id          String    @id @default(uuid()) @map("id")
  brokerId    String    @map("broker_id")
  firstName   String
  lastName    String
  cedulaRuc   String    @unique
  email       String?   
  phone       String?   
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  broker      Broker    @relation(fields: [brokerId], references: [id], onDelete: Cascade)

  @@map("clients")
}
